pipeline {
    agent any

    tools {
        nodejs 'nodejs23'           // pastikan tool ini terdaftar di Jenkins global tools
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'   // pastikan sonar-scanner terdaftar di Jenkins global tools
        REPO_DIR     = "${env.WORKSPACE}"
        DOCKER_IMG_PREFIX = "in30minthing"    // ubah sesuai registry/namespace kalau perlu
        // timeout for Sonar quality gate: ubah di sini jika perlu
        SONAR_QG_TIMEOUT_MIN = "5"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gieraldo/cicd-eks.git'
            }
        }

        stage('Frontend Compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} + || true'
                }
            }
        }

        stage('Backend Compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} + || true'
                }
            }
        }

        stage('GitLeaks Scan') {
            steps {
                // scan client then api. use mounted workspace path /repo inside container
                sh '''
                    docker run --rm -v ${REPO_DIR}:/repo:z zricethezav/gitleaks:latest detect --source /repo/client --exit-code 1 || true
                    docker run --rm -v ${REPO_DIR}:/repo:z zricethezav/gitleaks:latest detect --source /repo/api --exit-code 1 || true
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectName=NodeJS-Project \
                          -Dsonar.projectKey=NodeJS-Project \
                          -Dsonar.sources=.
                    """
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                // Wait for SonarQube Quality Gate result. Timeout configurable via SONAR_QG_TIMEOUT_MIN
                timeout(time: Integer.parseInt(env.SONAR_QG_TIMEOUT_MIN), unit: 'MINUTES') {
                    // abortPipeline: true -> fail the pipeline if quality gate fails
                    // change to false if you want to continue even when quality gate fails
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube-token'
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                sudo mv ./trivy /usr/local/bin/
                trivy --version
                '''
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }

        stage('Build-Tag & Push Backend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
                            sh "docker build -t ${DOCKER_IMG_PREFIX}/backend:latest ."
                            // scan image using trivy container - need docker socket
                            sh """
                              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${REPO_DIR}:/tmp/report:z aquasec/trivy image --format table -o /tmp/report/backend-image-report.html ${DOCKER_IMG_PREFIX}/backend:latest || true
                            """
                            sh "docker push ${DOCKER_IMG_PREFIX}/backend:latest"
                        }
                    }
                }
            }
        }

        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
                            sh "docker build -t ${DOCKER_IMG_PREFIX}/frontend:latest ."
                            sh """
                              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${REPO_DIR}:/tmp/report:z aquasec/trivy image --format table -o /tmp/report/frontend-image-report.html ${DOCKER_IMG_PREFIX}/frontend:latest || true
                            """
                            sh "docker push ${DOCKER_IMG_PREFIX}/frontend:latest"
                        }
                    }
                }
            }
        }

        stage('Manual Approval for Production') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy'
                }
            }
        }

        stage('Deployment To Prod') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'aldo-cluster',
                        contextName: '',
                        credentialsId: 'k8s-jenkins-token',
                        namespace: 'prod',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://FB4F0437152613F12E52893CD7FEDEA4.gr7.ap-southeast-2.eks.amazonaws.com'
                    ) {
                        sh 'kubectl apply -f k8s-prod/sc.yaml'
                        sleep 20
                        sh 'kubectl apply -f k8s-prod/mysql.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/backend.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/frontend.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/ci.yaml'
                        sh 'kubectl apply -f k8s-prod/ingress.yaml -n prod'
                        sleep 30
                    }
                }
            }
        }

        stage('Verify Deployment To Prod') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'aldo-cluster',
                        contextName: '',
                        credentialsId: 'k8s-jenkins-token',
                        namespace: 'prod',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://FB4F0437152613F12E52893CD7FEDEA4.gr7.ap-southeast-2.eks.amazonaws.com'
                    ) {
                        sh 'kubectl get pods -n prod'
                        sleep 20
                        sh 'kubectl get ingress -n prod'
                    }
                }
            }
        }
    }

    post {
        always {
            // archive reports (allowEmptyArchive true so pipeline doesn't fail when reports missing)
            archiveArtifacts artifacts: 'fs-report.html,backend-image-report.html,frontend-image-report.html,*.html', allowEmptyArchive: true
            junit allowEmptyResults: true, testResults: '**/test-*.xml'
        }
        failure {
            // optional: send notification or set build description
            echo "Build failed â€” check logs and SonarQube quality gate."
        }
    }
}
