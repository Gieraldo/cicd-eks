pipeline {
    agent any

    tools {
        nodejs 'nodejs23'           // pastikan tool ini terdaftar di Jenkins global tools
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'   // pastikan sonar-scanner terdaftar di Jenkins global tools
        REPO_DIR     = "${env.WORKSPACE}"
        DOCKER_IMG_PREFIX = "gieraldo21"    // namespace akun Docker Hub kamu
        SONAR_QG_TIMEOUT_MIN = "5"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gieraldo/cicd-eks.git'
            }
        }

        stage('Frontend Compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} + || true'
                }
            }
        }

        stage('Backend Compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} + || true'
                }
            }
        }

        stage('GitLeaks Scan') {
            steps {
                sh '''
                    docker run --rm -v ${REPO_DIR}:/repo:z zricethezav/gitleaks:latest detect --source /repo/client --exit-code 1 || true
                    docker run --rm -v ${REPO_DIR}:/repo:z zricethezav/gitleaks:latest detect --source /repo/api --exit-code 1 || true
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectName=NodeJS-Project \
                          -Dsonar.projectKey=NodeJS-Project \
                          -Dsonar.sources=.
                    """
                }
            }
        }

        stage("Quality Gate Check") {
            steps {
                echo "Skipping SonarQube Quality Gate wait"
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh """
                docker run --rm -v ${REPO_DIR}:/repo aquasec/trivy fs --format table -o /repo/fs-report.html /repo
                """
            }
        }

        stage('Build-Tag & Push Backend Docker Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/']) {
                        dir('api') {
                            sh "docker build -t ${DOCKER_IMG_PREFIX}/backend:latest ."
                            sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                              -v ${REPO_DIR}:/tmp/report \
                              aquasec/trivy image --format table -o /tmp/report/backend-image-report.html ${DOCKER_IMG_PREFIX}/backend:latest
                            """
                            sh "docker push ${DOCKER_IMG_PREFIX}/backend:latest"
                        }
                    }
                }
            }
        }

        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/']) {
                        dir('client') {
                            sh "docker build -t ${DOCKER_IMG_PREFIX}/frontend:latest ."
                            sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                              -v ${REPO_DIR}:/tmp/report \
                              aquasec/trivy image --format table -o /tmp/report/frontend-image-report.html ${DOCKER_IMG_PREFIX}/frontend:latest
                            """
                            sh "docker push ${DOCKER_IMG_PREFIX}/frontend:latest"
                        }
                    }
                }
            }
        }

        stage('Manual Approval for Production') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy'
                }
            }
        }

        stage('Deployment To Prod') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig-prod']) {
                    sh 'kubectl apply -f k8s-prod/sc.yaml'
                    sleep 20
                    sh 'kubectl apply -f k8s-prod/mysql.yaml -n prod'
                    sh 'kubectl apply -f k8s-prod/backend.yaml -n prod'
                    sh 'kubectl apply -f k8s-prod/frontend.yaml -n prod'
                    sh 'kubectl apply -f k8s-prod/ci.yaml'
                    sh 'kubectl apply -f k8s-prod/ingress.yaml -n prod'
                    sleep 30
                }
            }
        }

        stage('Verify Deployment To Prod') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig-prod']) {
                    sh 'kubectl get pods -n prod'
                    sleep 20
                    sh 'kubectl get ingress -n prod'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'fs-report.html,backend-image-report.html,frontend-image-report.html,*.html', allowEmptyArchive: true
            junit allowEmptyResults: true, testResults: '**/test-*.xml'
        }
        failure {
            echo "Build failed â€” check logs and SonarQube quality gate."
        }
    }
}
